Navbar con id per l'errore in console della navbar:import React, { useState } from "react";
import {
  Container,
  Navbar,
  Nav,
  Form,
  InputGroup,
  Dropdown,
  Button,
} from "react-bootstrap";
import { Link } from "react-router-dom";
import {
  HouseDoorFill,
  PeopleFill,
  SuitcaseFill,
  BellFill,
  Search,
  Grid3x3GapFill,
  PersonCircle,
} from "react-bootstrap-icons";
import "bootstrap/dist/css/bootstrap.min.css";
import logo from "/Vetrine.png";

const CustomNavbar = () => {
  const [mostraDropdown, setMostraDropdown] = useState(false);

  return (
    <Navbar
      expand="lg"
      className="shadow-sm fixed-top mb-5"
      style={{ backgroundColor: "#0085B5" }}
    >
      <Container>
        <Navbar.Brand href="/">
          <img src={logo} width="68" height="68" alt="Agri App" />
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
          <Nav className="me-auto">
            <Nav.Item>
              <Link to="/" className="nav-link">
                <HouseDoorFill size={20} />
                <div>Home</div>
              </Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link href="#rete">
                <PeopleFill size={20} />
                <div>Rete</div>
              </Nav.Link>
            </Nav.Item>
            <Link to "/Lavoro" className="text-decoration-none">
              <Nav.Item>
                <Nav.Link href="#lavoro">
                  <SuitcaseFill size={20} />
                  <div>Lavoro</div>
                </Nav.Link>
              </Nav.Item>
            </Link>
            <Nav.Item>
              <Nav.Link href "#notifiche">
                <BellFill size={20} />
                <div>Notifiche</div>
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link href "#aziende">
                <Grid3x3GapFill size={20} />
                <div>Per le aziende</div>
              </Nav.Link>
            </Nav.Item>
          </Nav>
          <Nav className="justify-content-end">
            <Form>
              <InputGroup>
                <input
                  type="search"
                  placeholder="Cerca"
                  aria-label="Cerca"
                  className="form-control border-0 bg-light"
                  name="search" // Aggiungi l'attributo 'name'
                  id="search-field" // Aggiungi l'attributo 'id'
                />
                <InputGroup.Text>
                  <Search size={20} />
                </InputGroup.Text>
              </InputGroup>
            </Form>
            <Dropdown align="end">
              <Dropdown.Toggle
                variant="transparent"
                style={{
                  border: "none",
                  background: "transparent",
                  cursor: "pointer",
                }}
                onClick={() => setMostraDropdown(!mostraDropdown)}
              >
                <PersonCircle size={24} />
              </Dropdown.Toggle
              <Dropdown.Menu show={mostraDropdown}>
                <Dropdown.Item href "/profile">Profilo</Dropdown.Item>
                <Dropdown.Divider />
                <Dropdown.Item href "#settings">Impostazioni e privacy</Dropdown.Item>
                <Dropdown.Item href "#help">Guida</Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default CustomNavbar;
//////////////////////////////
//////////////////////////////
//////////////////////////////
//////////////////////////////
//////////////////////////////
/*import React, { useState, useEffect } from "react";
import axios from "axios";
//import PrezziBovini from './ComponentsBacheca/PrezziBovini';
import PrezziLatte from "./ComponentsBacheca/PrezziLatte";
import PrezziOvini from "./ComponentsBacheca/PrezziOvini";
import PrezziSuini from "./ComponentsBacheca/PrezziSuini";

const Bacheca = () => {
  const [ipiData, setIpiData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          "http://sdmx.istat.it/SDMXWS/rest/data/IT1,115_333,1.2?startPeriod=2018&endPeriod=2018&format=jsondata"
        );
        setIpiData(response.data);
      } catch (error) {
        console.error("Error fetching IPI data:", error);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="mt-5">
      <h2>Indice della Produzione Industriale</h2>
      <ul>
        {ipiData.map((item, index) => (
          <li key={index}>
            {/* Renderizza qui i dati dell'Indice della Produzione Industriale */}
            {JSON.stringify(item)}
          </li>
        ))}
      </ul>
      <PrezziLatte />
      <PrezziOvini />
      <PrezziSuini />
      {/*  <PrezziBovini /> */}
    </div>
  );
};

export default Bacheca;*/

//////////////////////////////////////
//////////////////////////////////////
VECCHIA PREZZI LATTE:
import React, { useState, useEffect } from "react";
import { Container, Row, Col, Dropdown, Spinner, Table } from "react-bootstrap";
import { format } from "date-fns";
import itLocale from "date-fns/locale/it";

const PrezziLatte = () => {
  const [loading, setLoading] = useState(true);
  const [prezzi, setPrezzi] = useState([]);
  const [language, setLanguage] = useState("Sardegna");
  const [currentDate, setCurrentDate] = useState(new Date());

  const caricaDati = () => {
    setTimeout(() => {
      setPrezzi([
        {
          prodotto: "Pecorino",
          prezzo: "14 €/kg",
          varPerc: "0%",
          data: "01/05/24",
          luogo: "Siena",
        },
        {
          prodotto: "Latte",
          prezzo: "1,40 €/L",
          varPerc: "0%",
          data: "01/05/24",
          luogo: "Siena",
        },
        {
          prodotto: "Caciotta",
          prezzo: "10 €/kg",
          varPerc: "0%",
          data: "26/04/24",
          luogo: "Firenze",
        },
      ]);
      setLoading(false);
    }, 2000);
  };

  useEffect(() => {
    caricaDati();

    const dateInterval = setInterval(() => {
      setCurrentDate(new Date());
    }, 1000);

    return () => clearInterval(dateInterval);
  }, []);

  const handleLanguageChange = (lang) => {
    setLanguage(lang);
  };

  return (
    <Container>
      <Row className="mb-4 mt-5">
        <Col xs={12} sm={6}>
          <h2>PREZZI DEL LATTE</h2>
        </Col>
        <Col
          xs={12}
          sm={6}
          className="d-flex justify-content-end align-items-center"
        >
          <span className="me-3">
            {format(currentDate, "dd/MM/yyyy HH:mm", { locale: itLocale })}
          </span>
          <Dropdown>
            <Dropdown.Toggle variant="primary">{language}</Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => handleLanguageChange("Sardegna")}>
                Sardegna
              </Dropdown.Item>
              <Dropdown.Item onClick={() => handleLanguageChange("Italia")}>
                Italia
              </Dropdown.Item>
              <Dropdown.Item
                onClick={() => handleLanguageChange("Stati Uniti")}
              >
                Stati Uniti
              </Dropdown.Item>
              <Dropdown.Item onClick={() => handleLanguageChange("Francia")}>
                Francia
              </Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </Col>
      </Row>
      <Row>
        <Col>
          {loading ? (
            <div className="d-flex justify-content-center">
              <Spinner animation="border" />
            </div>
          ) : (
            <div className="table-responsive">
              <Table striped bordered hover>
                <thead>
                  <tr>
                    <th>Data</th>
                    <th>Luogo</th>
                    <th>Prodotto</th>
                    <th>Prezzo</th>
                    <th>Variazione</th>
                  </tr>
                </thead>
                <tbody>
                  {prezzi.map((item, index) => (
                    <tr key={index}>
                      <td>{item.data}</td>
                      <td>{item.luogo}</td>
                      <td>{item.prodotto}</td>
                      <td>{item.prezzo}</td>
                      <td>{item.varPerc}</td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </div>
          )}
        </Col>
      </Row>
    </Container>
  );
};

export default PrezziLatte;
/////////////////////////////////////
package simonemanca.vetrineCapstone.repositories;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import simonemanca.vetrineCapstone.entities.PrezzoStorico;

import java.util.Date;

public interface PrezzoStoricoRepository extends JpaRepository<PrezzoStorico, Long> {
    Page<PrezzoStorico> findByData(Date data, Pageable pageable);

    @Query("SELECT p FROM PrezzoStorico p WHERE (:data IS NULL OR p.data = :data) AND (:luogo IS NULL OR p.luogo = :luogo)")
    Page<PrezzoStorico> findByDataAndLuogo(@Param("data") Date data, @Param("luogo") String luogo, Pageable pageable);
}
///////////////////////////////////////
export const registerUser = (userData) => async (dispatch) => {
  try {
    const response = await axios.post(
      "http://localhost:8080/api/auth/register",
      userData
    );
    if (response.status === 201) {
      dispatch({ type: REGISTER_SUCCESS, payload: response.data });
      console.log("Registrazione riuscita:", response.data);
    } else {
      console.log("Registrazione fallita:", response.status);
      dispatch({ type: REGISTER_FAIL });
    }
  } catch (error) {
    console.error(
      "Errore nella registrazione:",
      error.response?.data?.message || error.message
    );
    dispatch({
      type: REGISTER_FAIL,
      error: error.response?.data?.message || error.message,
    });
  }
};
///////////////////////////////////////
ERRORI DI REGISTRAZIONE: 
Registrazione riuscita: {id: '1d655ce2-3f38-4e5f-ba7f-9317b9a0fff0', name: 'Simone', surname: 'Manca', email: 'simone.manca.98@gmail.com', password: '$2a$10$Kn7iY2oJjvTb2hxRO8PpI.xyNAMWBr68wC2Yxr9zmX5jgoNd40FRy', …}
FormIscrizione.jsx:35 Errore nella registrazione: TypeError: Cannot read properties of undefined (reading 'data')
    at FormIscrizione.jsx:31:57
overrideMethod @ console.js:273
(anonime) @ FormIscrizione.jsx:35
Promise.catch (asinc)
handleSubmit @ FormIscrizione.jsx:34
callCallback2 @ chunk-QO4NA2F3.js?v=279b23e2:3674
invokeGuardedCallbackDev @ chunk-QO4NA2F3.js?v=279b23e2:3699
invokeGuardedCallback @ chunk-QO4NA2F3.js?v=279b23e2:3733
invokeGuardedCallbackAndCatchFirstError @ chunk-QO4NA2F3.js?v=279b23e2:3736
executeDispatch @ chunk-QO4NA2F3.js?v=279b23e2:7016
processDispatchQueueItemsInOrder @ chunk-QO4NA2F3.js?v=279b23e2:7036
processDispatchQueue @ chunk-QO4NA2F3.js?v=279b23e2:7045
dispatchEventsForPlugins @ chunk-QO4NA2F3.js?v=279b23e2:7053
(anonime) @ chunk-QO4NA2F3.js?v=279b23e2:7177
batchedUpdates$1 @ chunk-QO4NA2F3.js?v=279b23e2:18941
batchedUpdates @ chunk-QO4NA2F3.js?v=279b23e2:3579
dispatchEventForPluginEventSystem @ chunk-QO4NA2F3.js?v=279b23e2:7176
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ chunk-QO4NA2F3.js?v=279b23e2:5478
dispatchEvent @ chunk-QO4NA2F3.js?v=279b23e2:5472
dispatchDiscreteEvent @ chunk-QO4NA2F3.js?v=279b23e2:5449
Mostra 16 altri frame
Mostra meno
